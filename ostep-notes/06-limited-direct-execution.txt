==> Time Sharing
  - run one process for a little while, then run another one, and so forth
  - achieves the illusion of parallelism (virtualization)

==> User Mode
  - code that runs in user mode in restricted in what it can 2025-05-25T14:08:05

==> Kernel Mode
  - code that runs in kernel mode has full access to the hardware and can execute any instruction

==> Kernel Stack
  - A private stack used by the kernel when executing on behalf of a process
  - Each process has it's own kernel stack, seperate from it's user-space stack
  - Used only while the process is in kernel mode (e.g., during system call or interrupt)
  - The CPU saves PC and flags here during traps
  => What's in the kernel stack
    - A trap frame or context frame:
      - saved user registers (PC, flags, general-purpose registers)
      - optional system call arguments (if not in registers)
    - The call stack of the kernel functions (e.g., sys_read -> vfs_read -> ext4_read)
  => When it's used
    - A process enteres the kernel (via sys call or interrupt)
    - To run kernel function like read(), write(), yield()
    - It's temporary working space for kernel code during that process's turn

==> System call
  - allow the kernel to carefully expose certain key pieces of functionality to user programs, such as accessing the file system, creating processes, communicating with other processes, and allocating more memory

==> Flow of System Calls
  - user process calls a system call
  - system call program puts arguments in registers or on the stack
  - system call program puts system call number in a register
  - program executes a trap instruction (e.g., svc 0 on ARM, int 0x80 on x86)
  - CPU switches to kernel mode, and control is transferred to the kernel
  - kernel looks up the system call number in a table
  - kernel executes the system call
  - kernel returns to user mode
  - CPU switches back to user mode

==> Trap instruction
  - to execute a system call, a program must execute this special instruction
  - jumps into the kernel and raises the privilege level to kernel mode
  => Return-from-trap instruction
    - When finished running, the kernel calls this instruction
    - returns into the calling user program, while at the same time reducing the privilege level back to user mode
    - resumes **after** syscall

  - The CPU executes the instruction (system call instruction), the user-space program triggers it, and the OS kernel responds to it
  - ANALOGY: The syscall instruction as a doorbell: the user program rings it, the CPU hears it and routes control, and the kernel opens the door and handles the request

==> Trap Table
  - Used by CPU at runtime to determine which kernel code (handler function) to run to specific traps or interupts
  - Table is created at boot time and filled by the kernel
  - Tells CPU where to go on syscall, traps, and interrupts. All syscalls go to the same handler
  => System call number
    - set by user code (e.g., in rax) tells the kernel which service is being requested
  - NOTE TO SELF: The hardware or user program trigger an interrupt which tells the CPU to change to kernel mode and then run the respected handler for the interrupt and then complete the handler and then go back to executing the program or what ever else the CPU was doing

==> Program Counter (instruction pointer)
    - A special CPU register that holds the memory address of the next instruction to execute
    - Every time the CPU executes an instruction:
      1. It fetches the instruction at the address in the program counter
      2. Then, it usually increments the PC to point to the next instruction
      3. In case of jumps, calls, branches, or traps, the PC is updated to a new address

==> Time Interrupt (CPU hardware feature - iterrupt timer)
  - Set up during boot time
  - Hardware mechanism to ensure the user program does not run forever
  - Gives the OS the ability to run again on a CPU even if processes act in a non-cooperative fashion
  - Essential in helping the OS maintain control of the machine

==> Context switch (involves saving CPU state of current process and restoring saved state of another process)
  - OS saves a few reigters values for the running executing process (into it's PCB)
  - OS restores a few for the soon-to-be executing process (from it's kernel stack) from it's PCB
  - OS restores 
  => Example
    - To save context (state) of the currently running process, the OS will execute some low-level assembly code to save:
      1. the general purpose registers
      2. PC
      3. the kernel stack pointer of the currently running process (each process has its own kernel stack)
    - Then restore said registers, PC, and switch to the kernel stack for the soon-to-be-executing process
  - switches context, by changing the stack pointer to use B's kernel stack (and not A's)

==> Types of register saves/restores during context switching
  1. Time interrupt occurs:
    - the **user registers** of the running process are implicity saved by the **hardware**, using the kernel stack of that process
  2. OS deciding to switch from A to B (context switch):
    - the **kernel registers** are explicitly saved by the **software** (i.e., the OS), but this time into memory in the process structure of the process

==> Random Notes
  - The putting of arguments in registers or on the stack is done by the user process not the CPU or OS.
  - The "saving of state" is handled mostly by the hardware, not the OS code itself

==> Recap Notes
  - A trap is a system call or fault that causes the CPU to switch to kernel mode. When a system call trap is triggered (e.g., by the syscall instruction) the CPU saves the current program state (e.g., registers, flags, program counter) onto the kernel stack for a process and switches the stack pointer to the kernel stack, switches to kernel mode, and executes the kernel syscall handler.
  - The kernel handles the syscall, and then uses a return-from-trap instruction (like sysret) to resume user-space execution.
The CPU executes that return instruction, restoring the saved state and returning control to the user program exactly where it left off.
  - The system call interface relies on the user program putting syscall number and arguments into specific general-purpose registers. The syscall instruction traps to kernel mode, where the CPU automatically switches the stack pointer to a process-specific kernel stack, saving user state like the PC(RIP) and flags(RFLAGS). The kernel can then safely run its handler on its own stack. Once finished, the kernel restores the saved state and uses sysret to resume execution of the user program exactly where it left off.
