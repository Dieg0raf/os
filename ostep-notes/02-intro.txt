==> What a running program does:
  - it executes instructions (billion of instructions ever second)
  ===> The Processor
    - fetches an instruction from memory
    - decodes it (figures out what instruction it is)
    - executes it (execute instruction)
    - after completed, moves onto next instruction until completion of program

==> Virtualizing Memory
  - Is a layer inside the OS that intercepts requests for memory access from processes
  - Translating virtual memory address to actual physical address
  - When a process tries to read from or write to a memory address, it actually uses a virtual address (not physical address)
  - allows many programs to run and many programs to concurrently access their own instructions and data (thus sharing the physical memory), and many programs to access devices (thus sharing disks and so forth),
  - Each process has it own private virtual address space (sometimes just calledits address space)
  - Each process see their own virtual memory addresses
  - The OS somehow maps onto the physical memory of the machine
  - A memory reference within one running program does not affect the address space of other processes(or the OS itself)

==> Persistance
  - DRAM stores values in a volatile way, when power is lost, any data in memory is lost
  - File system manages the disk and provides a way to store data persistently inside the OS

==> Key difference between procedure call and system call
  - Procedure call: transfer control to a procedure, and when the procedure is done, it returns control to the caller
  - System call: transfer control to the OS, and when the OS is done, it returns control to the caller

==> What "system call transfers control to the OS" means:
  - The CPU stops executing user code and starts executing kernel code, specifically, code inside the OS kernel


==> Hardware Privilege Levels
  - The CPU has two privilege levels: user mode and kernel mode
  - User mode: the CPU is executing user code, no access to hardware
  - Kernel mode: the CPU is executing kernel code, has access to hardware and everything else
  - The CPU can switch between user mode and kernel mode to control which instructions a running program can execute and which resources it can access
